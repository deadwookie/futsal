var fs = require('fs');
var path = require('path');
var mixin = require('object-path');
var extend = require('extend');
var parseArgs = require('minimist');

var data = {};

var config = {
  argv: function(options) {
    var argv = parseArgs(process.argv.slice(2), options),
      obj = {};

    (argv._ || []).forEach(function(arg) {
      obj[arg] = true;
    });

    (argv['--'] || []).forEach(function(arg) {
      obj[arg] = false;
    });

    Object.keys(argv).forEach(function(arg) {
      if (arg === '_' || arg === '--') return;
      obj[arg] = argv[arg];
    });

    return config.extend(obj, options);
  },

  file: function(filename, options) {
    var obj;
    try {
      obj = require(filename);
    } catch (err) {
      // Silence an error if there is no such module
      // Or should we send some debug message?
    }

    return config.extend(obj, options);
  },

  dir: function(dirname, files, options) {
    var dir;
    if (!Array.isArray(files)) {
      options = files;
      files = false;
      dir = fs.readdirSync(dirname);
    } else {
      dir = files;
      files = fs.readdirSync(dirname);
    }

    dir.forEach(function(file) {
      if (files && !~files.indexOf(file)) return;
      config.file(path.join(dirname, file), options);
    });

    return config;
  },

  extend: function(obj, options) {
    options || (options = {});
    if (!obj) return config;

    // already stored data takes precedense by default
    data = !options.override ? extend(true, {}, obj, data) : extend(true, data, obj);

    return config;
  }
};

// Extend API with all methods from `object-path` module
Object.keys(mixin).forEach(function(name) {
  var method = mixin[name];

  if (typeof method === 'function') {
    config[name] = function() {
      var args = Array.prototype.slice.call(arguments),
        res;
      args.unshift(data);
      res = method.apply(mixin, args);

      return res !== data || name === 'get' ? res : config;
    };
  }
});

module.exports = config;
